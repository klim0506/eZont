from const import *
from files.API_maps import *
from files.user_actions import *
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from telegram import ReplyKeyboardMarkup
from time import sleep

start_keyboard = [['/find_dev', '/take_umbrella', '/return_umbrella'], ['/all_devs', '/about_us', '/help_me']]
start_markup = ReplyKeyboardMarkup(start_keyboard, one_time_keyboard=False)
INPUT_TEXT = ''


def start(update, context):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ß–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç —Ç—ã –º–æ–∂–µ—à—å –≤–∑—è—Ç—å –∑–æ–Ω—Ç –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –≥–æ—Ä–æ–¥–∞!",
        reply_markup=start_markup
    )


# –í–∑—è—Ç—å –∑–æ–Ω—Ç
def take_umbrella(update, context):
    nums_keyboard = [['1111', '2222', '3333']]
    nums_markup = ReplyKeyboardMarkup(nums_keyboard, one_time_keyboard=True, input_field_placeholder='device_id?')

    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–ø–ø–∞—Ä–∞—Ç–∞",
        reply_markup=nums_markup
    )

    sleep(5)
    device_system_index = INPUT_TEXT

    if not device_system_index.isnumeric():
        device_system_index = '333'

    if not returned_umbrella('db/data.db', device_system_index):
        update.message.reply_text("–ù–µ–ª—å–∑—è –≤–∑—è—Ç—å –±–æ–ª—å—à–µ 3 –∑–æ–Ω—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", reply_markup=start_markup)

    else:
        update.message.reply_text("""–í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç‚òÇ 
–°–¥–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–º –∞–ø–ø–∞—Ä–∞—Ç–µ eZont""", reply_markup=start_markup)


# –í–µ—Ä–Ω—É—Ç—å –∑–æ–Ω—Ç
def return_umbrella(update, context):
    nums_keyboard = [['1111', '2222', '3333']]
    nums_markup = ReplyKeyboardMarkup(nums_keyboard, one_time_keyboard=True)

    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–ø–ø–∞—Ä–∞—Ç–∞",
        reply_markup=nums_markup
    )

    sleep(5)
    device_system_index = INPUT_TEXT

    if not taken_umbrella('db/data.db', device_system_index):
        update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –∑–æ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –∏—Ö –≤–µ—Ä–Ω—É—Ç—å", reply_markup=start_markup)

    else:
        update.message.reply_text("""–°–ø–∞—Å–∏–±–æ‚òÇ 
–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∑–æ–Ω—Ç –≤ –ª—é–±–æ–º –∞–ø–ø–∞—Ä–∞—Ç–µ eZont""", reply_markup=start_markup)


# –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –∞–ø–ø–∞—Ä–∞—Ç –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ
def find_dev(update, context):
    user_coordinates = (55.660968, 37.476088)

    data = near_app('db/data.db', user_coordinates[0], user_coordinates[1])
    near_app_map(user_coordinates, (data['latitude'], data['longitude']))

    user_id = update.message['chat']['id']
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞—Ä—Ç—ã —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏
    context.bot.send_photo(chat_id=user_id, photo=open('files/images/near_app_map.jpg', 'rb'))
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–ø–ø–∞—Ä–∞—Ç–µ
    update.message.reply_text(f"""–ú—ã –Ω–∞—à–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π –∞–ø–ø–∞—Ä–∞—Ç!
    
üåç   –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ - {data['place']}
‚òÇ   –ó–æ–Ω—Ç–æ–≤ - {data['fill_cell']}
üîç   –°–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫ - {data['free_cell']}""")


# –í—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ –∫–∞—Ç—Ä—ã-—Å—Ö–µ–º—ã –≤—Å–µ—Ö –∞–ø–ø–∞—Ä–∞—Ç–æ–≤
def all_devs(update, context):
    all_app_map('db/data.db')  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ –ë–î
    user_id = update.message['chat']['id']
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞—Ä—Ç—ã —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏
    context.bot.send_photo(chat_id=user_id, photo=open('files/images/all_app_map.jpg', 'rb'))


# –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
def support(update, context):
    update.message.reply_text("–ú—ã –¥–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∑–∂–µ)")


def input_func(update, context):
    INPUT_TEXT = update.message.text
    print(INPUT_TEXT)


# –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –±–æ—Ç–∞
def send_instructions(update, context):
    instr_keyboard = [['/how_to_return_umbrella', '/how_to_take_umbrella'], ['/description_of_project', '/support']]
    markup = ReplyKeyboardMarkup(instr_keyboard, one_time_keyboard=True)
    update.message.reply_text("–ó–¥–µ—Å—å –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ß–µ–º –ø–æ–º–æ—á—å?", reply_markup=markup)


def return_instructions(update, context):
    update.message.reply_text(instruction('files/txt/how_to_return_umbrella.txt'), reply_markup=start_markup)


def take_instructions(update, context):
    update.message.reply_text(instruction('files/txt/how_to_take_umbrella.txt'), reply_markup=start_markup)


def description(update, context):
    update.message.reply_text(instruction('files/txt/description.txt'), reply_markup=start_markup)


def main():
    updater = Updater(TOKEN)

    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("find_dev", find_dev))
    dp.add_handler(CommandHandler("take_umbrella", take_umbrella))
    dp.add_handler(CommandHandler("return_umbrella", return_umbrella))
    dp.add_handler(CommandHandler("all_devs", all_devs))
    dp.add_handler(CommandHandler("about_us", description))
    dp.add_handler(CommandHandler("support", support))
    dp.add_handler(CommandHandler("help_me", send_instructions))
    dp.add_handler(CommandHandler("how_to_return_umbrella", return_instructions))
    dp.add_handler(CommandHandler("how_to_take_umbrella", take_instructions))
    dp.add_handler(CommandHandler("description_of_project", description))
    # dp.add_handler(MessageHandler(Filters.text, input_func))

    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    main()
